import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:repo_scout_app/models/owner/owner.dart';
import 'package:repo_scout_app/models/permissions/permissions.dart';
import 'package:repo_scout_app/models/license/license.dart';

part 'repo.freezed.dart';
part 'repo.g.dart';

@freezed
abstract class Repo with _$Repo {
  factory Repo({
    required int? id,
    required String? nodeId,
    required String? name,
    required String? fullName,
    required Owner? owner,
    required bool? private,
    required String? htmlUrl,
    required String? description,
    required bool? fork,
    required String? url,
    required String? archiveUrl,
    required String? assigneesUrl,
    required String? blobsUrl,
    required String? branchesUrl,
    required String? collaboratorsUrl,
    required String? commentsUrl,
    required String? commitsUrl,
    required String? compareUrl,
    required String? contentsUrl,
    required String? contributorsUrl,
    required String? deploymentsUrl,
    required String? downloadsUrl,
    required String? eventsUrl,
    required String? forksUrl,
    required String? gitCommitsUrl,
    required String? gitRefsUrl,
    required String? gitTagsUrl,
    required String? gitUrl,
    required String? issueCommentUrl,
    required String? issueEventsUrl,
    required String? issuesUrl,
    required String? keysUrl,
    required String? labelsUrl,
    required String? languagesUrl,
    required String? mergesUrl,
    required String? milestonesUrl,
    required String? notificationsUrl,
    required String? pullsUrl,
    required String? releasesUrl,
    required String? sshUrl,
    required String? stargazersUrl,
    required String? statusesUrl,
    required String? subscribersUrl,
    required String? subscriptionUrl,
    required String? tagsUrl,
    required String? teamsUrl,
    required String? treesUrl,
    required String? cloneUrl,
    required String? mirrorUrl,
    required String? hooksUrl,
    required String? svnUrl,
    required String? homepage,
    required String? language,
    required int? forksCount,
    required int? stargazersCount,
    required int? watchersCount,
    required int? size,
    required String? defaultBranch,
    required int? openIssuesCount,
    required bool? isTemplate,
    required List<String>? topics,
    required bool? hasIssues,
    required bool? hasProjects,
    required bool? hasWiki,
    required bool? hasPages,
    required bool? hasDownloads,
    required bool? archived,
    required bool? disabled,
    required String? visibility,
    required String? pushedAt,
    required String? createdAt,
    required String? updatedAt,
    required Permissions? permissions,
    required bool? allowRebaseMerge,
    required String? tempCloneToken,
    required bool? allowSquashMerge,
    required bool? allowAutoMerge,
    required bool? deleteBranchOnMerge,
    required bool? allowMergeCommit,
    required int? subscribersCount,
    required int? networkCount,
    required License? license,
    required List<Repo>? forks,
    required int? openIssues,
    required int? watchers,
  }) = _Repo;

  factory Repo.fromJson(Map<String, dynamic> json) => _$RepoFromJson(json);
}
