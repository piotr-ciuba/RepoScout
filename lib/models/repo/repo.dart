import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:repo_scout_app/models/owner/owner.dart';
import 'package:repo_scout_app/models/permissions/permissions.dart';
import 'package:repo_scout_app/models/license/license.dart';

part 'repo.freezed.dart';
part 'repo.g.dart';

@freezed
abstract class Repo with _$Repo {
  factory Repo({
    required int? id,
    @JsonKey(name: 'node_id') required String? nodeId,
    required String? name,
    @JsonKey(name: 'full_name') required String? fullName,
    required Owner? owner,
    required bool? private,
    @JsonKey(name: 'html_url') required String? htmlUrl,
    required String? description,
    required bool? fork,
    required String? url,
    @JsonKey(name: 'archive_url') required String? archiveUrl,
    @JsonKey(name: 'assignees_url') required String? assigneesUrl,
    @JsonKey(name: 'blobs_url') required String? blobsUrl,
    @JsonKey(name: 'branches_url') required String? branchesUrl,
    @JsonKey(name: 'collaborators_url') required String? collaboratorsUrl,
    @JsonKey(name: 'comments_url') required String? commentsUrl,
    @JsonKey(name: 'commits_url') required String? commitsUrl,
    @JsonKey(name: 'compare_url') required String? compareUrl,
    @JsonKey(name: 'contents_url') required String? contentsUrl,
    @JsonKey(name: 'contributors_url') required String? contributorsUrl,
    @JsonKey(name: 'deployments_url') required String? deploymentsUrl,
    @JsonKey(name: 'downloads_url') required String? downloadsUrl,
    @JsonKey(name: 'events_url') required String? eventsUrl,
    @JsonKey(name: 'forks_url') required String? forksUrl,
    @JsonKey(name: 'git_commits_url') required String? gitCommitsUrl,
    @JsonKey(name: 'git_refs_url') required String? gitRefsUrl,
    @JsonKey(name: 'git_tags_url') required String? gitTagsUrl,
    @JsonKey(name: 'git_url') required String? gitUrl,
    @JsonKey(name: 'issue_comment_url') required String? issueCommentUrl,
    @JsonKey(name: 'issue_events_url') required String? issueEventsUrl,
    @JsonKey(name: 'issues_url') required String? issuesUrl,
    @JsonKey(name: 'keys_url') required String? keysUrl,
    @JsonKey(name: 'labels_url') required String? labelsUrl,
    @JsonKey(name: 'languages_url') required String? languagesUrl,
    @JsonKey(name: 'merges_url') required String? mergesUrl,
    @JsonKey(name: 'milestones_url') required String? milestonesUrl,
    @JsonKey(name: 'notifications_url') required String? notificationsUrl,
    @JsonKey(name: 'pulls_url') required String? pullsUrl,
    @JsonKey(name: 'releases_url') required String? releasesUrl,
    @JsonKey(name: 'ssh_url') required String? sshUrl,
    @JsonKey(name: 'stargazers_url') required String? stargazersUrl,
    @JsonKey(name: 'statuses_url') required String? statusesUrl,
    @JsonKey(name: 'subscribers_url') required String? subscribersUrl,
    @JsonKey(name: 'subscription_url') required String? subscriptionUrl,
    @JsonKey(name: 'tags_url') required String? tagsUrl,
    @JsonKey(name: 'teams_url') required String? teamsUrl,
    @JsonKey(name: 'trees_url') required String? treesUrl,
    @JsonKey(name: 'clone_url') required String? cloneUrl,
    @JsonKey(name: 'mirror_url') required String? mirrorUrl,
    @JsonKey(name: 'hooks_url') required String? hooksUrl,
    @JsonKey(name: 'svn_url') required String? svnUrl,
    required String? homepage,
    required String? language,
    @JsonKey(name: 'forks_count') required int? forksCount,
    @JsonKey(name: 'stargazers_count') required int? stargazersCount,
    @JsonKey(name: 'watchers_count') required int? watchersCount,
    required int? size,
    @JsonKey(name: 'default_branch') required String? defaultBranch,
    @JsonKey(name: 'open_issues_count') required int? openIssuesCount,
    @JsonKey(name: 'is_template') required bool? isTemplate,
    required List<String>? topics,
    @JsonKey(name: 'has_issues') required bool? hasIssues,
    @JsonKey(name: 'has_projects') required bool? hasProjects,
    @JsonKey(name: 'has_wiki') required bool? hasWiki,
    @JsonKey(name: 'has_pages') required bool? hasPages,
    @JsonKey(name: 'has_downloads') required bool? hasDownloads,
    required bool? archived,
    required bool? disabled,
    required String? visibility,
    @JsonKey(name: 'pushed_at') required String? pushedAt,
    @JsonKey(name: 'created_at') required String? createdAt,
    @JsonKey(name: 'updated_at') required String? updatedAt,
    required Permissions? permissions,
    @JsonKey(name: 'allow_rebase_merge') required bool? allowRebaseMerge,
    @JsonKey(name: 'temp_clone_token') required String? tempCloneToken,
    @JsonKey(name: 'allow_squash_merge') required bool? allowSquashMerge,
    @JsonKey(name: 'allow_auto_merge') required bool? allowAutoMerge,
    @JsonKey(name: 'delete_branch_on_merge') required bool? deleteBranchOnMerge,
    @JsonKey(name: 'allow_merge_commit') required bool? allowMergeCommit,
    @JsonKey(name: 'subscribers_count') required int? subscribersCount,
    @JsonKey(name: 'network_count') required int? networkCount,
    required License? license,
    required int? forks,
    @JsonKey(name: 'open_issues') required int? openIssues,
    required int? watchers,
  }) = _Repo;

  factory Repo.fromJson(Map<String, dynamic> json) => _$RepoFromJson(json);
}