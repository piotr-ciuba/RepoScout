// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'repo.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_Repo _$RepoFromJson(Map<String, dynamic> json) => _Repo(
  id: (json['id'] as num?)?.toInt(),
  nodeId: json['nodeId'] as String?,
  name: json['name'] as String?,
  fullName: json['fullName'] as String?,
  owner: json['owner'] == null
      ? null
      : Owner.fromJson(json['owner'] as Map<String, dynamic>),
  private: json['private'] as bool?,
  htmlUrl: json['htmlUrl'] as String?,
  description: json['description'] as String?,
  fork: json['fork'] as bool?,
  url: json['url'] as String?,
  archiveUrl: json['archiveUrl'] as String?,
  assigneesUrl: json['assigneesUrl'] as String?,
  blobsUrl: json['blobsUrl'] as String?,
  branchesUrl: json['branchesUrl'] as String?,
  collaboratorsUrl: json['collaboratorsUrl'] as String?,
  commentsUrl: json['commentsUrl'] as String?,
  commitsUrl: json['commitsUrl'] as String?,
  compareUrl: json['compareUrl'] as String?,
  contentsUrl: json['contentsUrl'] as String?,
  contributorsUrl: json['contributorsUrl'] as String?,
  deploymentsUrl: json['deploymentsUrl'] as String?,
  downloadsUrl: json['downloadsUrl'] as String?,
  eventsUrl: json['eventsUrl'] as String?,
  forksUrl: json['forksUrl'] as String?,
  gitCommitsUrl: json['gitCommitsUrl'] as String?,
  gitRefsUrl: json['gitRefsUrl'] as String?,
  gitTagsUrl: json['gitTagsUrl'] as String?,
  gitUrl: json['gitUrl'] as String?,
  issueCommentUrl: json['issueCommentUrl'] as String?,
  issueEventsUrl: json['issueEventsUrl'] as String?,
  issuesUrl: json['issuesUrl'] as String?,
  keysUrl: json['keysUrl'] as String?,
  labelsUrl: json['labelsUrl'] as String?,
  languagesUrl: json['languagesUrl'] as String?,
  mergesUrl: json['mergesUrl'] as String?,
  milestonesUrl: json['milestonesUrl'] as String?,
  notificationsUrl: json['notificationsUrl'] as String?,
  pullsUrl: json['pullsUrl'] as String?,
  releasesUrl: json['releasesUrl'] as String?,
  sshUrl: json['sshUrl'] as String?,
  stargazersUrl: json['stargazersUrl'] as String?,
  statusesUrl: json['statusesUrl'] as String?,
  subscribersUrl: json['subscribersUrl'] as String?,
  subscriptionUrl: json['subscriptionUrl'] as String?,
  tagsUrl: json['tagsUrl'] as String?,
  teamsUrl: json['teamsUrl'] as String?,
  treesUrl: json['treesUrl'] as String?,
  cloneUrl: json['cloneUrl'] as String?,
  mirrorUrl: json['mirrorUrl'] as String?,
  hooksUrl: json['hooksUrl'] as String?,
  svnUrl: json['svnUrl'] as String?,
  homepage: json['homepage'] as String?,
  language: json['language'] as String?,
  forksCount: (json['forksCount'] as num?)?.toInt(),
  stargazersCount: (json['stargazersCount'] as num?)?.toInt(),
  watchersCount: (json['watchersCount'] as num?)?.toInt(),
  size: (json['size'] as num?)?.toInt(),
  defaultBranch: json['defaultBranch'] as String?,
  openIssuesCount: (json['openIssuesCount'] as num?)?.toInt(),
  isTemplate: json['isTemplate'] as bool?,
  topics: (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
  hasIssues: json['hasIssues'] as bool?,
  hasProjects: json['hasProjects'] as bool?,
  hasWiki: json['hasWiki'] as bool?,
  hasPages: json['hasPages'] as bool?,
  hasDownloads: json['hasDownloads'] as bool?,
  archived: json['archived'] as bool?,
  disabled: json['disabled'] as bool?,
  visibility: json['visibility'] as String?,
  pushedAt: json['pushedAt'] as String?,
  createdAt: json['createdAt'] as String?,
  updatedAt: json['updatedAt'] as String?,
  permissions: json['permissions'] == null
      ? null
      : Permissions.fromJson(json['permissions'] as Map<String, dynamic>),
  allowRebaseMerge: json['allowRebaseMerge'] as bool?,
  tempCloneToken: json['tempCloneToken'] as String?,
  allowSquashMerge: json['allowSquashMerge'] as bool?,
  allowAutoMerge: json['allowAutoMerge'] as bool?,
  deleteBranchOnMerge: json['deleteBranchOnMerge'] as bool?,
  allowMergeCommit: json['allowMergeCommit'] as bool?,
  subscribersCount: (json['subscribersCount'] as num?)?.toInt(),
  networkCount: (json['networkCount'] as num?)?.toInt(),
  license: json['license'] == null
      ? null
      : License.fromJson(json['license'] as Map<String, dynamic>),
  forks: (json['forks'] as List<dynamic>?)
      ?.map((e) => Repo.fromJson(e as Map<String, dynamic>))
      .toList(),
  openIssues: (json['openIssues'] as num?)?.toInt(),
  watchers: (json['watchers'] as num?)?.toInt(),
);

Map<String, dynamic> _$RepoToJson(_Repo instance) => <String, dynamic>{
  'id': instance.id,
  'nodeId': instance.nodeId,
  'name': instance.name,
  'fullName': instance.fullName,
  'owner': instance.owner,
  'private': instance.private,
  'htmlUrl': instance.htmlUrl,
  'description': instance.description,
  'fork': instance.fork,
  'url': instance.url,
  'archiveUrl': instance.archiveUrl,
  'assigneesUrl': instance.assigneesUrl,
  'blobsUrl': instance.blobsUrl,
  'branchesUrl': instance.branchesUrl,
  'collaboratorsUrl': instance.collaboratorsUrl,
  'commentsUrl': instance.commentsUrl,
  'commitsUrl': instance.commitsUrl,
  'compareUrl': instance.compareUrl,
  'contentsUrl': instance.contentsUrl,
  'contributorsUrl': instance.contributorsUrl,
  'deploymentsUrl': instance.deploymentsUrl,
  'downloadsUrl': instance.downloadsUrl,
  'eventsUrl': instance.eventsUrl,
  'forksUrl': instance.forksUrl,
  'gitCommitsUrl': instance.gitCommitsUrl,
  'gitRefsUrl': instance.gitRefsUrl,
  'gitTagsUrl': instance.gitTagsUrl,
  'gitUrl': instance.gitUrl,
  'issueCommentUrl': instance.issueCommentUrl,
  'issueEventsUrl': instance.issueEventsUrl,
  'issuesUrl': instance.issuesUrl,
  'keysUrl': instance.keysUrl,
  'labelsUrl': instance.labelsUrl,
  'languagesUrl': instance.languagesUrl,
  'mergesUrl': instance.mergesUrl,
  'milestonesUrl': instance.milestonesUrl,
  'notificationsUrl': instance.notificationsUrl,
  'pullsUrl': instance.pullsUrl,
  'releasesUrl': instance.releasesUrl,
  'sshUrl': instance.sshUrl,
  'stargazersUrl': instance.stargazersUrl,
  'statusesUrl': instance.statusesUrl,
  'subscribersUrl': instance.subscribersUrl,
  'subscriptionUrl': instance.subscriptionUrl,
  'tagsUrl': instance.tagsUrl,
  'teamsUrl': instance.teamsUrl,
  'treesUrl': instance.treesUrl,
  'cloneUrl': instance.cloneUrl,
  'mirrorUrl': instance.mirrorUrl,
  'hooksUrl': instance.hooksUrl,
  'svnUrl': instance.svnUrl,
  'homepage': instance.homepage,
  'language': instance.language,
  'forksCount': instance.forksCount,
  'stargazersCount': instance.stargazersCount,
  'watchersCount': instance.watchersCount,
  'size': instance.size,
  'defaultBranch': instance.defaultBranch,
  'openIssuesCount': instance.openIssuesCount,
  'isTemplate': instance.isTemplate,
  'topics': instance.topics,
  'hasIssues': instance.hasIssues,
  'hasProjects': instance.hasProjects,
  'hasWiki': instance.hasWiki,
  'hasPages': instance.hasPages,
  'hasDownloads': instance.hasDownloads,
  'archived': instance.archived,
  'disabled': instance.disabled,
  'visibility': instance.visibility,
  'pushedAt': instance.pushedAt,
  'createdAt': instance.createdAt,
  'updatedAt': instance.updatedAt,
  'permissions': instance.permissions,
  'allowRebaseMerge': instance.allowRebaseMerge,
  'tempCloneToken': instance.tempCloneToken,
  'allowSquashMerge': instance.allowSquashMerge,
  'allowAutoMerge': instance.allowAutoMerge,
  'deleteBranchOnMerge': instance.deleteBranchOnMerge,
  'allowMergeCommit': instance.allowMergeCommit,
  'subscribersCount': instance.subscribersCount,
  'networkCount': instance.networkCount,
  'license': instance.license,
  'forks': instance.forks,
  'openIssues': instance.openIssues,
  'watchers': instance.watchers,
};
